
use std::str::FromStr;

use lalrpop_util::ParseError;

use super::ast::BinOpKind::*;
use super::ast::ScalarKind::*;
use super::parser::*;
use super::parser::ExprKind::*;
use super::parser::Type::*;

grammar["LALR(1)"];

extern {
    // Source location and error types returned by this parser. 
    type Location = usize;
    type Error = &'static str;
}

// Expose the nicer function name parse_expr instead of parse_Expr.
pub expr = <Expr>;

Type: Box<Type> = {
    ScalarType
};

ScalarType: Box<Type> = {
    "bool" => Box::new(Scalar(Bool)),
    "i32" => Box::new(Scalar(I32))
};

Expr: Box<Expr> = {
    Lambda,
    LetExpr
};

LetExpr: Box<Expr> = {
   Let,
   SumExpr
};

Let: Box<Expr> = {
    <s:Name> <t:(":" <Type>)?> ":=" <value:SumExpr> ";" <body:Expr> => {
        let mut res = expr_box(Let(s, value, body));
        res.ty = t.map(|b| *b);
        res
    }
};

SumExpr: Box<Expr> = {
    <l:SumExpr> "+" <r:Term> => expr_box(BinOp(Add, l, r)),
    <l:SumExpr> "-" <r:Term> => expr_box(BinOp(Subtract, l, r)),
    Term
};

Term: Box<Expr> = {
    BoolLiteral,
    I32Literal,
    Ident,
    MakeVector,
    Map,
    "(" <Expr> ")"
};

BoolLiteral: Box<Expr> = {
    "true" => expr_box(BoolLiteral(true)),
    "false" => expr_box(BoolLiteral(false)),
};

I32Literal: Box<Expr> = {
    <s:r"[0-9]+"> =>? {
       match i32::from_str(s) {
           Ok(v) => Ok(expr_box(I32Literal(v))),
           Err(_) => Err(ParseError::User { error: "bad i32 literal" })
           // TODO: This won't work for -2**31 
       }
    }
};

Ident: Box<Expr> = {
    <n:Name> <t:(":" <Type>)?> => {
        let mut res = expr_box(Ident(n));
        res.ty = t.map(|b| *b);
        res
    }
};

Lambda: Box<Expr> = {
    "|" <p:Parameters> "|" <e:Expr> => expr_box(Lambda(p, e))
};

Parameters: Vec<Parameter> = {
    <v:(<Parameter> ",")*> <p:Parameter?> => match p {
        None => v,
        Some(p) => {
            let mut v = v;
            v.push(p);
            v
        }
    }
};

MakeVector: Box<Expr> = {
    "[" <v:(<Expr> ",")*> <e:Expr?> "]" => {
        let mut v = v;
        if let Some(e) = e {
            v.push(e);
        }
        let v: Vec<Expr> = v.into_iter().map(|b| *b).collect();
        expr_box(MakeVector(v))
    }
};

Map: Box<Expr> = {
   "map" "(" <d:Expr> "," <f:Expr> ")" => expr_box(Map(d, f))
};

Parameter: Parameter = <n:Name> <t:(":" <Type>)?> => Parameter { name: n, ty: t.map(|b| *b) };

Name: String = <s:r"[A-Za-z_][A_Za-z0-9_]*"> => s.to_string();